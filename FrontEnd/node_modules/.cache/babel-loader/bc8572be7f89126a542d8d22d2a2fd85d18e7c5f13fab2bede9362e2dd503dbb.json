{"ast":null,"code":"var _jsxFileName = \"D:\\\\khaled\\\\NADAFA\\\\FrontEnd\\\\src\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './Login.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Login() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [error, setError] = useState('');\n  const [isPasswordChangeRequired, setIsPasswordChangeRequired] = useState(true);\n  const navigate = useNavigate();\n\n  // Default credentials (to be changed)\n  const ADMIN_USERNAME = 'admin';\n  const DEFAULT_PASSWORD = 'Admin@2025!';\n  const validatePassword = pwd => {\n    // Password strength requirements:\n    // - At least 12 characters\n    // - Contains uppercase and lowercase letters\n    // - Contains at least one number\n    // - Contains at least one special character\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{12,}$/;\n    return passwordRegex.test(pwd);\n  };\n  const handleLogin = e => {\n    e.preventDefault();\n    if (isPasswordChangeRequired) {\n      // Password change flow\n      if (!validatePassword(newPassword)) {\n        setError('New password must be at least 12 characters long and include uppercase, lowercase, number, and special character.');\n        return;\n      }\n      if (username === ADMIN_USERNAME && password === DEFAULT_PASSWORD) {\n        // Successfully changed password\n        localStorage.setItem('userPassword', newPassword);\n        setIsPasswordChangeRequired(false);\n        navigate('/tickets');\n      } else {\n        setError('Invalid current credentials');\n      }\n    } else {\n      // Standard login flow\n      const storedPassword = localStorage.getItem('userPassword') || DEFAULT_PASSWORD;\n      if (username === ADMIN_USERNAME && password === storedPassword) {\n        navigate('/tickets');\n      } else {\n        setError('Invalid username or password');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleLogin,\n      className: \"login-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: isPasswordChangeRequired ? 'Change Password' : 'Login'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 19\n      }, this), isPasswordChangeRequired ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"current-password\",\n            children: \"Current Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"current-password\",\n            value: password,\n            onChange: e => setPassword(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"new-password\",\n            children: \"New Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"new-password\",\n            value: newPassword,\n            onChange: e => setNewPassword(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"username\",\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"username\",\n            value: username,\n            onChange: e => setUsername(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"password\",\n            value: password,\n            onChange: e => setPassword(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"login-button\",\n        children: isPasswordChangeRequired ? 'Change Password' : 'Login'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"OIoDkUgp6OPeDOzsb5+Hn6mJHCc=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","Login","_s","username","setUsername","password","setPassword","newPassword","setNewPassword","error","setError","isPasswordChangeRequired","setIsPasswordChangeRequired","navigate","ADMIN_USERNAME","DEFAULT_PASSWORD","validatePassword","pwd","passwordRegex","test","handleLogin","e","preventDefault","localStorage","setItem","storedPassword","getItem","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","value","onChange","target","required","_c","$RefreshReg$"],"sources":["D:/khaled/NADAFA/FrontEnd/src/Login.js"],"sourcesContent":["import React, { useState } from 'react'; \r\nimport { useNavigate } from 'react-router-dom';\r\nimport './Login.css';\r\n\r\nfunction Login() {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [newPassword, setNewPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [isPasswordChangeRequired, setIsPasswordChangeRequired] = useState(true);\r\n  const navigate = useNavigate();\r\n\r\n  // Default credentials (to be changed)\r\n  const ADMIN_USERNAME = 'admin';\r\n  const DEFAULT_PASSWORD = 'Admin@2025!';\r\n\r\n  const validatePassword = (pwd) => {\r\n    // Password strength requirements:\r\n    // - At least 12 characters\r\n    // - Contains uppercase and lowercase letters\r\n    // - Contains at least one number\r\n    // - Contains at least one special character\r\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{12,}$/;\r\n    return passwordRegex.test(pwd);\r\n  };\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (isPasswordChangeRequired) {\r\n      // Password change flow\r\n      if (!validatePassword(newPassword)) {\r\n        setError('New password must be at least 12 characters long and include uppercase, lowercase, number, and special character.');\r\n        return;\r\n      }\r\n\r\n      if (username === ADMIN_USERNAME && password === DEFAULT_PASSWORD) {\r\n        // Successfully changed password\r\n        localStorage.setItem('userPassword', newPassword);\r\n        setIsPasswordChangeRequired(false);\r\n        navigate('/tickets');\r\n      } else {\r\n        setError('Invalid current credentials');\r\n      }\r\n    } else {\r\n      // Standard login flow\r\n      const storedPassword = localStorage.getItem('userPassword') || DEFAULT_PASSWORD;\r\n      \r\n      if (username === ADMIN_USERNAME && password === storedPassword) {\r\n        navigate('/tickets');\r\n      } else {\r\n        setError('Invalid username or password');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <form onSubmit={handleLogin} className=\"login-form\">\r\n        <h2>{isPasswordChangeRequired ? 'Change Password' : 'Login'}</h2>\r\n        {error && <div className=\"error-message\">{error}</div>}\r\n        \r\n        {isPasswordChangeRequired ? (\r\n          <>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"current-password\">Current Password</label>\r\n              <input\r\n                type=\"password\"\r\n                id=\"current-password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"new-password\">New Password</label>\r\n              <input\r\n                type=\"password\"\r\n                id=\"new-password\"\r\n                value={newPassword}\r\n                onChange={(e) => setNewPassword(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"username\">Username</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"username\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"password\">Password</label>\r\n              <input\r\n                type=\"password\"\r\n                id=\"password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n          </>\r\n        )}\r\n        \r\n        <button type=\"submit\" className=\"login-button\">\r\n          {isPasswordChangeRequired ? 'Change Password' : 'Login'}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAErB,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACgB,wBAAwB,EAAEC,2BAA2B,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC9E,MAAMkB,QAAQ,GAAGjB,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMkB,cAAc,GAAG,OAAO;EAC9B,MAAMC,gBAAgB,GAAG,aAAa;EAEtC,MAAMC,gBAAgB,GAAIC,GAAG,IAAK;IAChC;IACA;IACA;IACA;IACA;IACA,MAAMC,aAAa,GAAG,uEAAuE;IAC7F,OAAOA,aAAa,CAACC,IAAI,CAACF,GAAG,CAAC;EAChC,CAAC;EAED,MAAMG,WAAW,GAAIC,CAAC,IAAK;IACzBA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAIX,wBAAwB,EAAE;MAC5B;MACA,IAAI,CAACK,gBAAgB,CAACT,WAAW,CAAC,EAAE;QAClCG,QAAQ,CAAC,mHAAmH,CAAC;QAC7H;MACF;MAEA,IAAIP,QAAQ,KAAKW,cAAc,IAAIT,QAAQ,KAAKU,gBAAgB,EAAE;QAChE;QACAQ,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEjB,WAAW,CAAC;QACjDK,2BAA2B,CAAC,KAAK,CAAC;QAClCC,QAAQ,CAAC,UAAU,CAAC;MACtB,CAAC,MAAM;QACLH,QAAQ,CAAC,6BAA6B,CAAC;MACzC;IACF,CAAC,MAAM;MACL;MACA,MAAMe,cAAc,GAAGF,YAAY,CAACG,OAAO,CAAC,cAAc,CAAC,IAAIX,gBAAgB;MAE/E,IAAIZ,QAAQ,KAAKW,cAAc,IAAIT,QAAQ,KAAKoB,cAAc,EAAE;QAC9DZ,QAAQ,CAAC,UAAU,CAAC;MACtB,CAAC,MAAM;QACLH,QAAQ,CAAC,8BAA8B,CAAC;MAC1C;IACF;EACF,CAAC;EAED,oBACEZ,OAAA;IAAK6B,SAAS,EAAC,iBAAiB;IAAAC,QAAA,eAC9B9B,OAAA;MAAM+B,QAAQ,EAAET,WAAY;MAACO,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACjD9B,OAAA;QAAA8B,QAAA,EAAKjB,wBAAwB,GAAG,iBAAiB,GAAG;MAAO;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EAChExB,KAAK,iBAAIX,OAAA;QAAK6B,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAEnB;MAAK;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,EAErDtB,wBAAwB,gBACvBb,OAAA,CAAAE,SAAA;QAAA4B,QAAA,gBACE9B,OAAA;UAAK6B,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzB9B,OAAA;YAAOoC,OAAO,EAAC,kBAAkB;YAAAN,QAAA,EAAC;UAAgB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC1DnC,OAAA;YACEqC,IAAI,EAAC,UAAU;YACfC,EAAE,EAAC,kBAAkB;YACrBC,KAAK,EAAEhC,QAAS;YAChBiC,QAAQ,EAAGjB,CAAC,IAAKf,WAAW,CAACe,CAAC,CAACkB,MAAM,CAACF,KAAK,CAAE;YAC7CG,QAAQ;UAAA;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eACNnC,OAAA;UAAK6B,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzB9B,OAAA;YAAOoC,OAAO,EAAC,cAAc;YAAAN,QAAA,EAAC;UAAY;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAClDnC,OAAA;YACEqC,IAAI,EAAC,UAAU;YACfC,EAAE,EAAC,cAAc;YACjBC,KAAK,EAAE9B,WAAY;YACnB+B,QAAQ,EAAGjB,CAAC,IAAKb,cAAc,CAACa,CAAC,CAACkB,MAAM,CAACF,KAAK,CAAE;YAChDG,QAAQ;UAAA;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA,eACN,CAAC,gBAEHnC,OAAA,CAAAE,SAAA;QAAA4B,QAAA,gBACE9B,OAAA;UAAK6B,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzB9B,OAAA;YAAOoC,OAAO,EAAC,UAAU;YAAAN,QAAA,EAAC;UAAQ;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC1CnC,OAAA;YACEqC,IAAI,EAAC,MAAM;YACXC,EAAE,EAAC,UAAU;YACbC,KAAK,EAAElC,QAAS;YAChBmC,QAAQ,EAAGjB,CAAC,IAAKjB,WAAW,CAACiB,CAAC,CAACkB,MAAM,CAACF,KAAK,CAAE;YAC7CG,QAAQ;UAAA;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eACNnC,OAAA;UAAK6B,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzB9B,OAAA;YAAOoC,OAAO,EAAC,UAAU;YAAAN,QAAA,EAAC;UAAQ;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC1CnC,OAAA;YACEqC,IAAI,EAAC,UAAU;YACfC,EAAE,EAAC,UAAU;YACbC,KAAK,EAAEhC,QAAS;YAChBiC,QAAQ,EAAGjB,CAAC,IAAKf,WAAW,CAACe,CAAC,CAACkB,MAAM,CAACF,KAAK,CAAE;YAC7CG,QAAQ;UAAA;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA,eACN,CACH,eAEDnC,OAAA;QAAQqC,IAAI,EAAC,QAAQ;QAACR,SAAS,EAAC,cAAc;QAAAC,QAAA,EAC3CjB,wBAAwB,GAAG,iBAAiB,GAAG;MAAO;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAAC/B,EAAA,CAhHQD,KAAK;EAAA,QAMKL,WAAW;AAAA;AAAA6C,EAAA,GANrBxC,KAAK;AAkHd,eAAeA,KAAK;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}